// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: diamond_wallet.proto

package diamond_wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DiamondWalletService_DetailWalletByUserID_FullMethodName = "/proto.DiamondWalletService/DetailWalletByUserID"
	DiamondWalletService_UpdateDiamondWallet_FullMethodName  = "/proto.DiamondWalletService/UpdateDiamondWallet"
)

// DiamondWalletServiceClient is the client API for DiamondWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiamondWalletServiceClient interface {
	DetailWalletByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*DiamondWalletDetail, error)
	UpdateDiamondWallet(ctx context.Context, in *UpdateDiamondReq, opts ...grpc.CallOption) (*StatusOK, error)
}

type diamondWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiamondWalletServiceClient(cc grpc.ClientConnInterface) DiamondWalletServiceClient {
	return &diamondWalletServiceClient{cc}
}

func (c *diamondWalletServiceClient) DetailWalletByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*DiamondWalletDetail, error) {
	out := new(DiamondWalletDetail)
	err := c.cc.Invoke(ctx, DiamondWalletService_DetailWalletByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diamondWalletServiceClient) UpdateDiamondWallet(ctx context.Context, in *UpdateDiamondReq, opts ...grpc.CallOption) (*StatusOK, error) {
	out := new(StatusOK)
	err := c.cc.Invoke(ctx, DiamondWalletService_UpdateDiamondWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiamondWalletServiceServer is the server API for DiamondWalletService service.
// All implementations must embed UnimplementedDiamondWalletServiceServer
// for forward compatibility
type DiamondWalletServiceServer interface {
	DetailWalletByUserID(context.Context, *UserID) (*DiamondWalletDetail, error)
	UpdateDiamondWallet(context.Context, *UpdateDiamondReq) (*StatusOK, error)
	mustEmbedUnimplementedDiamondWalletServiceServer()
}

// UnimplementedDiamondWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiamondWalletServiceServer struct {
}

func (UnimplementedDiamondWalletServiceServer) DetailWalletByUserID(context.Context, *UserID) (*DiamondWalletDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailWalletByUserID not implemented")
}
func (UnimplementedDiamondWalletServiceServer) UpdateDiamondWallet(context.Context, *UpdateDiamondReq) (*StatusOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiamondWallet not implemented")
}
func (UnimplementedDiamondWalletServiceServer) mustEmbedUnimplementedDiamondWalletServiceServer() {}

// UnsafeDiamondWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiamondWalletServiceServer will
// result in compilation errors.
type UnsafeDiamondWalletServiceServer interface {
	mustEmbedUnimplementedDiamondWalletServiceServer()
}

func RegisterDiamondWalletServiceServer(s grpc.ServiceRegistrar, srv DiamondWalletServiceServer) {
	s.RegisterService(&DiamondWalletService_ServiceDesc, srv)
}

func _DiamondWalletService_DetailWalletByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiamondWalletServiceServer).DetailWalletByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiamondWalletService_DetailWalletByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiamondWalletServiceServer).DetailWalletByUserID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiamondWalletService_UpdateDiamondWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiamondReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiamondWalletServiceServer).UpdateDiamondWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiamondWalletService_UpdateDiamondWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiamondWalletServiceServer).UpdateDiamondWallet(ctx, req.(*UpdateDiamondReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DiamondWalletService_ServiceDesc is the grpc.ServiceDesc for DiamondWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiamondWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DiamondWalletService",
	HandlerType: (*DiamondWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetailWalletByUserID",
			Handler:    _DiamondWalletService_DetailWalletByUserID_Handler,
		},
		{
			MethodName: "UpdateDiamondWallet",
			Handler:    _DiamondWalletService_UpdateDiamondWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diamond_wallet.proto",
}
